#!/usr/bin/env python

import argparse


def sj2bed(sj, output):
    motifs = {0: "non-canonical", 1: "GT/AG", 2: "CT/AC", 3: "GC/AG", 4: "CT/GC", 5: "AT/AC", 6: "GT/AT"}
    strands = {0: ".", 1: "+", 2: "-"}
    with open(sj) as input_file:
        res = open(output, "w+")
        for line in input_file:
            elem = line.split("\t")
            if elem[6] == 0:
                continue
            else:
                new_line = str(elem[0]) + "\t" + str(int(elem[1]) - 1) + "\t" + str(elem[2]) + "\t"
                my_names = [
                    "motif=" + str(motifs[int(elem[4])]),
                    "uniquely_mapped=" + str(elem[6]),
                    "multi_mapped=" + str(elem[7]),
                    "maximum_spliced_alignment_overhang=" + str(elem[8]),
                    "annotated_junction=" + str(bool(elem[5])),
                ]
                new_line = (
                    new_line
                    + "\t"
                    + ";".join(my_names).replace("\n", "")
                    + "\t"
                    + str(elem[6])
                    + "\t"
                    + str(strands[int(elem[3])])
                    + "\n"
                )
                res.write(new_line)
    res.close()
    input_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.MetavarTypeHelpFormatter,
        description="""Generate bed junction file with SJ.out.tab.""",
    )
    parser.add_argument("--sj", type=str, help="SJ.out.tab file generated by STAR", required=True)
    parser.add_argument("--output", type=str, help="output bed file name", required=True)
    args = parser.parse_args()

sj2bed(args.sj, args.output)
