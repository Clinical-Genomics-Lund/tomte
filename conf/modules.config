/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

//
// Genome preparation options
//

process {

    withName: '.*PREPARE_REFERENCES:GUNZIP_FASTA' {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*.{fasta,fa}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:SAMTOOLS_FAIDX_GENOME' {
        ext.args2 = " --no-same-owner "
        ext.when = {!params.fasta_fai}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:BUILD_DICT' {
        ext.when = {!params.sequence_dict}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*dict"
        ]
    }

    withName: '.*PREPARE_REFERENCES:UNTAR_STAR_INDEX' {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:BUILD_STAR_GENOME' {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:GUNZIP_GTF' {
        ext.when = { params.gtf && params.gtf.endsWith(".gz") }
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*gtf"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GTF_TO_REFFLAT' {
        ext.args = [
            '-genePredExt',
            '-geneNameAsName2'
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*refflat"
        ]
    }
}

//
// Alignment options
//

process {
    withName: '.*ALIGNMENT:FASTP' {
        ext.args = [
            params.min_trimmed_length ? "--length_required ${params.min_trimmed_length}" : '',
            '--correction',
            '--overrepresentation_analysis'
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/trimming" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:STAR_ALIGN' {
        ext.args = [
            "--twopassMode ${params.star_two_pass_mode}",
            '--outReadsUnmapped None',
            '--outSAMtype BAM SortedByCoordinate',
            '--quantMode GeneCounts',
            '--outSAMstrandField intronMotif',
            '--peOverlapNbasesMin 10',
            '--peOverlapMMp 0.1',
            '--chimSegmentMin 12',
            '--chimJunctionOverhangMin 12',
            '--chimOutType WithinBAM',
            '--readFilesCommand gunzip -c'
            ].join(' ')
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/trimming" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:RNA_DOWNSAMPLE' {
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// BAM_QC
//

process {
    withName: '.*BAM_QC:PICARD_COLLECTRNASEQMETRICS' {
        ext.args = { [
            meta.strandedness.equals('unstranded') ? '--STRAND_SPECIFICITY NONE' : '',
            meta.strandedness.equals('forward') ? '--STRAND_SPECIFICITY FIRST_READ_TRANSCRIPTION_STRAND' : '',
            meta.strandedness.equals('reverse') ? '--STRAND_SPECIFICITY SECOND_READ_TRANSCRIPTION_STRAND' : ''
        ].join(' ').trim() }
        publishDir = [
            path: { "${params.outdir}/bam_qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// ANALYSE_TRANSCRIPTS
//

process {
    withName: '.*ANALYSE_TRANSCRIPTS:STRINGTIE_STRINGTIE' {
        publishDir = [
            path: { "${params.outdir}/analyse_transcripts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANALYSE_TRANSCRIPTS:GFFCOMPARE' {
        publishDir = [
            path: { "${params.outdir}/analyse_transcripts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// CALL_VARIANTS
//

process {
    withName: '.*CALL_VARIANTS_GATK:GATK4_SPLITNCIGARREADS' {
        ext.prefix = { "${meta.id}_splitncigar" }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*CALL_VARIANTS_GATK:SAMTOOLS_INDEX' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*CALL_VARIANTS_GATK:GATK4_HAPLOTYPECALLER' {
        ext.args = [
            '--dont-use-soft-clipped-bases',
            '--create-output-variant-index',
            '--standard-min-confidence-threshold-for-calling 20'
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_gatk" }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*CALL_VARIANTS_GATK:GATK4_VARIANTFILTRATION' {
        ext.args = [
            '--window 3',
            '--cluster 35',
            '--filter-name "QD" --filter-expression "QD < 2.0"',
            '--filter-name "FS" --filter-expression "FS > 30.0"'
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/call_variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_VARIANTS:BCFTOOLS_MPILEUP' {
        ext.args = '--max-depth 2000'
        ext.args2 = [
            '--variants-only',
            params.bcftools_caller_mode.equals('multiallelic')
                ? '--multiallelic-caller'
                : '--consensus-caller --pval-threshold 0.01',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/call_variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*BCFTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/call_variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// ALLELE_SPECIFIC_CALLING
//

process {
    withName: '.*ALLELE_SPECIFIC_CALLING:BCFTOOLS_VIEW' {
        ext.prefix = { "${meta.id}_biallelic" }
        ext.args = '--genotype het --max-alleles 2 --min-alleles 2 --types snps'
    }

    withName: '.*ALLELE_SPECIFIC_CALLING:BCFTOOLS_INDEX' {
        ext.args = '--tbi'
    }
}
